⚙💾🗃☁
💾 Part 1
💻 What is a System?

    📢 Architecture of collection of technologies or softwares that are connected
     to each other to serve the certain set of users  to fulfill certain set of requirements

    📢 Factors
    ✔ Components chosen to serve
    ✔ Set of Users
    ✔ Set of requirements

💻 What is design?
    📢 How everything is intertwined, the process
    ✔ design of a static website will be different from the live streaming websites


💻 Why System Design?
    📢 Skills that consists of everything
    ✔ Need to know what are the components to be used, why & where to be used
    ✔ Point out constraints & pain points
    ✔ Figure out pros and cons

💾 Part 2
💻 Components of System Design
    📢 Basic building blocks of system design

    Types of components
    📢 Logical Entities: 
    ✔ Data
    ✔ Databases
    ✔ Applications
    ✔ Cache 
    ✔ Message queues
    ✔ Infrastructure
    ✔ Communication

    ✔ Databases🖥 <=> Applications💻 <=> Users👨
    ✔ communication protocol like TCP/HTTP/IP, etc helps communicate & interact
    between machines where databases and applications are running
    ✔ Presentation layer can be all the views in mobile app or web app
    ✔ not all applications might need presentation layer
    ✔ the components can be run on the cloud services like aws, azure, etc.


    📢 Tangible Entities [technologies]
    ✔ Store text, images, videos ...
      MongoDB, MySQL, Cassandra ...
    ✔ Java, Golang, Python, Amber, React, Angular ...
    ✔ Redis, MemeCache ...
    ✔ Kafka, RabbitMQ ...
    ✔ AWS, Google Cloud Platform, Azure ...
    ✔ APIs, RPCs, Messages ...

     Presentation Layer 💻 <=> Applications💻 <=> Databases🖥 

💾 Part 3
💻 Client Server Architecture
    📢 Two-tier architecture
    ✔ client💻 <=> Server 🖥
    ✔ Logic and data either sits on client or Server

    📢 three-tier architecture
    ✔ client💻 <=> Logic🖥 <=> Data 🖥
    ✔ Logic and data is separated => Application & Database layer

    📢 N-tier architecture
    ✔ client💻<=> Load balancer <=> Logic🖥<=> Caching <=> Data 🖥
    ✔ Logic and data is separated => Application & Database layer

    📢How to select the architecture?
    ✔ Thin clients =>  Majority of processing happens in the backend
                    Example: E commerce sites, streaming applications
    ✔ Thick clients => Majority of processing happens in the frontend
                    Example: Gaming Apps, Video editing software
    ✔ 2tier example => light weight website for small business
    ✔ 3tier example => Basic library mgmt for school
    ✔ N tier example => large scale systems(Gmail, Facebook)

💾 Part 4     
💻 Proxies 
    📢 On behalf
    ✔ used for security

     📢 Forward Proxies 
     ✔ client💻 <=> Forward Proxies <=> | Server🖥
     ✔ AKA Client side proxy 
     ✔ Anonymity of client
     ✔ disguises a clients IP addresses
     ✔ block malicious traffic from reaching an origin web Server
     ✔ improve user's experience by caching external site content

    📢 Reverse Proxies 
     ✔ client💻 <=> | Reverse Proxies <=>  Server🖥
     ✔ AKA Server side proxy 
     ✔ Anonymity of servers
     ✔ disguises a servers IP addresses
     ✔ used for traffic control caching the response from servers
     ✔ Load balancing => distributes the load for app using multiple servers
     ✔ Provides a single configuration point to manage SSL/technologies
     ✔ Mitigate the DDoS attacks=> deflates overall impact of distributed denial of services attacks.
     ✔ Example: VPN, Dark web
     ✔ Can be use to bypass the blocked websites
     ✔ Sometimes bottleneck problem might occur

💾 Part 5
💻 Data & Data Flow
    📢 Data    
    📢 Data format/representation    
    📢 Mechanisms for Data flow    
    📢 Factors => Type, volume, scale, purpose    

    📢 Layers
       ✔ Business Layer => text, images, vides, notes ... 
       ✔ Application Layer => JSON/XML
       ✔ Data stores => databases- tables, indexes, lists, trees
       ✔ Network Layer => Packets  
       ✔ Hardware Layer => 0's & 1's

"Always think about data flow"

    📢 Data stores🖥
      ✔ Databases => Username, phone ...
      ✔ Queues => [Send sms request, send email request]
      ✔ Caches => [Request:Response] 
      ✔ Indexes => [Most searched items, items searched in last 1 hour]

    📢 Data flow methods <=>
      ✔ APIs  
      ✔ Messages  
      ✔ Events  

    📢 Data generation 
      ✔ Users => Input
      ✔ Internal => system populated 
      ✔ Insights => when user upload or retrieve some data 
        Example: if a user buys, invoice generation
                youtube history, payment details, profile details,...

    📢 Factors
      ✔ Type of data => knowing the type of data is important, images or videos ...  
      ✔ Volume  => system supporting gb or tb
      ✔ Consumption / Retrieval => reads /writes
      ✔ security => transaction, banking

    📢 Types of system
    Examples
      ✔ Authorization system => User login, ID management
      ✔ Streaming system => Netflix, Hotstar, Prime video, ...
      ✔ Transactional system => Ecommerce, booking rides, grocery, ...
      ✔ Heavy compute system => image recognition, video processing, using ML models

💾 Part 6
💻 Databases
    📢 Types of Databases    
    📢 Pros & Cons 
    📢 Use Cases   
    📢 Examples

    📢 Types of Databases   
      ✔ Relational
        - Schema => Tables & Rows
                => Primary key, not null, foreign key, int, varchar, default, etc. are all example of schema constraints
            Example:
            Table1: Employees => ID[Primary key], Name, age,dept_id[Foreign key,NOT NULL],acc_id [Foreign key, NOT NULL] 
            Table1: Department => ID[Primary key], Name, start_date, HOD
            Table1: Account => ID[Primary key], debit, credit, balance, is_employee
        => database for inter related complex data can be easily designed
        => ensures garbage or null value is not populated
        => ensures all other schema constraints are followed

        - ACID Properties => 
            => Atomicity: Either All or none
            => Consistency: Same value for both the request
            => Isolation: Read and writes are isolated
            => Durability: Mechanism to guarantee that transactions completed will survive permanently

        - Schema change is difficult to evolve
        - difficult for horizontal scaling

      ✔ Non-relational => AKA NoSQL Databases
      - No fixed schemas
      - Does not follow ACID Properties
      - different types of relational databases are used for different purposes

      ✔ Key value stores => Application or configuration data
                        => caching data
            example: feature, discount, enable cities,...

      ✔ Document based Databases
      - No fixed schema, supports heavy reads and writes
      - collections(tables) => documents(rows)
      - flexible complex dynamic data
      - highly scalable
      - sharding
      - special query operations/aggregations
      - saved in JSON format
        example: 
        [
            {
                id:"1",
                name: "jack",
                city: 
                {
                    id:"2",
                    name:"la",
                    state:"california"
                },
                country:
                {
                    id:"4",
                    Name:"usa",
                    code:"US",
                    continent:"North America"
                }
            }

        ]

      ✔ column based Databases
      - supports large number of heavy writes, special reads
      - distributed
      - Example: event data, or streaming data, storing data for songs
            Cassandra, HBase, Sylla
     
      ✔ Search Databases
      - Supports Full text search queries
      - Images/Videos, Amazon s3, buckets
      - Large datasets
      - Time series
      - Example: Elastic, Solar, ...

💾 Part 7
📢 Anatomy of Applications & services
💻 Client <=> 💻 Servers
  ✔ Application in both client and server side have different responsibilities
  Tech stack
  ✔ The applications are language agnostic for interacting with each other

  Client Apps => rendering UI elements
              => handle interactions
              => collect data
              => communicate with backend via APIs to fetch/store data
              => render static data/info
  Server Apps => Expose API endpoints
              => house business Logic
              => handling data modeling/transform
              => interact with data stores
              => interact with other services           
💻 Elements/factors of app design/development
              => requirements - gather requirements
              => layer - web/mobile/desktop/backend app
              => tech stack - which language to use
              => code structures / design pattern
              => data store interactions
              => performance cost
              => deployment
              => monitoring
              => operations excellence /reliability

💾 Part 8
💻 Application Programming Interface (API)
📢 What is API?
    ✔ one piece of code interacting with another which can run on different machine.
    ✔ Advantages => communication 
                => Abstraction
                => platform agnostic

📢 Examples and usecases
📢 Types of APIs

    ✔ Private APIs => hidden APIs
    ✔ Public APIs => available for Public,
    ✔ web APIs => superset of private & public, get,post...
    ✔ SDK/library => lock,fork, join, release lock

📢 API Factors => API contracts
                => Documentation
                => Data format
                => security

📢 API Standards => RPC
                => SOAP
                => REST

💾 Part 9 
💻 Cache
  📢 What is Cache?
      ✔ a hardware or a software component which helps in serving the data which is frequently requested or expensive to compute on, so cache saves this request.
      ✔ cache example => server side cache (reverse proxy)
              => browser cache (client side)
              => similar redundant request and response is saved in cache memory

  📢 invalidation and eviction  
     ✔ Cache invalidation => data should be changed in some time, updating old value with a new value in cache is cache invalidation
         => TTL - Time to live (expiry date for the cache)
     ✔ Cache eviction - when old cache has to be evicted for new keys
                      => FIFO - first in first out (first inserted is evicted)
                      => LRU - Least recently used (oldest is evicted)
                      => LFU - Least frequently used (less times used evicted)
  
  📢 Cache pattern
    ✔ Cache aside strategy/Patterns -application communication with cache doesnot communicate with Database
                      => Advantage - when cache fails, application can still serve using database
                      => supports heavy reads
                      => works even if cache is down
                      => TTL/application code have to be used keep DB and cache consistent

                      => disadvantage - to decide about cache long expiry or application code to refresh cache


    ✔ Cache read through strategy/pattern - cache sits between application & database
                                           - application only communicates with cache
                       => Advantage - read heavy work 
                       => great alternate for read heavy workloads, example: newsfeed
                       => data modeling of cache and db has to be smaller
      
                        => disadvantage - first request always miss cache. (can be solved by preloading the cache)
  
    ✔ Cache write through strategy/pattern - similar to read through, application will read & write in cache.           => Advantage - can directly write to cache
                        => disadvantage - extra layer of latency of reading from cache (can be solved using write around pattern)
    
    ✔ Cache write around strategy/pattern- writes directly to db but reads from cache

    ✔ Cache write back strategy/pattern- writes is saved in cache and writing in db later in bulk
                        => Advantage - useful for write heavy workloads
                                    - db failure can be sustained for the time cache keeps data in bulk
                                    - used by various DB's internal implementation
                                    - cache failure results in system failure

  📢 Where is my cache?
      => can be in client browser
      => can be in forward proxy
      => can be in reverse proxy
      => can be in application 
      => can be outside database

💾 Part 10     
💻 REST APIs
    📢 What is REST?
        ✔ Representational State Transfer
        ✔ how data is exchanged between client and server 
        ✔ Follows 6 guidelines 
        ✔ Architecture Style for Web API from the thesis of Roy Fielding
        ✔ Uses XML or JSON to send & receive the data
        ✔ simply calls services via URL path
        ✔ result is readable which is just plain XML or JSON
        ✔ Transfer is over HTTP only
        ✔ Easy to call from JavaScript
        ✔ performance much better than SOAP, less CPU intensive, leaner code, etc.
        ✔ Resources => URI, Uniform Interface - Methods, Representational 
        ✔ Protocol => Client-server, 
                    => stateless - one server gets multiple request from same or different clients
                    => cacheable
                    => layered
                    => Uniform interface
                    => code on demand(optional)- a server can send code to client that it should execute in runtime(like Java Applets or JavaScript)
        ✔ Hypermedia as the Engine of application state. (HATEOAS)
       Advantages - Efficiency
                  - scalable
                  - User perceived performance
           
           
    📢 HTTP methods - GET => retrieve data from a specified Resource
                       POST => submit data to be processed to a specific Resources
                       PUT => update a specified Resource
                       DELETE => delete a specified Resource
                       HEAD => same as get but does not return a body
                       OPTIONs=> returns the supported HTTP methods
                       PATCH => Update partial Resources

    📢 End points - URI/URL where api/services can be accessed by a client app
                  - Get => https://mysite.com/api/users
                  - Get => https://mysite.com/api/users/1 or users/details/1
                  - Post => https://mysite.com/api/users
                  - Put => https://mysite.com/api/users/1 or users/update/1
                  - delete => https://mysite.com/api/users/1 or user/delete/1                    

    📢 State transfer & stateless
        ✔ State transfer - state of data that is being transferred from server to client
        ✔ Stateless - multiple clients requesting for one server, server is unknown to the state of the client request, hence stateless.

    📢 Path vs Query params
        ✔ Path params - specific resource via path using id in the URI
        ✔ Query params - specific resource using query in the URI
    
    📢 HTTP status codes
        ✔ 1xx => informal error
        ✔ 2xx => success 
        ✔ 3xx => redirection
        ✔ 4xx => client error 
        ✔ 5xx => server error

    📢 Security, Authorization & Error handling 


    📢 Difference in SOAP and REST
        ✔ Analogy => SOAP is like envelope & REST is like postcard. SOAP being more secure
        ✔ SOAP => XML based message protocol
              => uses WSDL for communication between consumer & provider
              => invokes services by calling RPC
              => does not return human readable results
              => transfer is over HTTP, Also uses other protocol such as SMTP, FTP,etc.
              => JavaScript can call SOAP, but difficult to implementation
              => performance not great compare to REST
     
    📢 API Gateway
        ✔ component acts as an entry point for APIs
        ✔ Security
        ✔ Authenticated
        ✔ Authorization
        ✔ SSL termination
        ✔ DDoS protection/ Throttling
        
        Features
        ✔ Separate cross cutting concerns 
        ✔ Separate and consolidate cross cutting concerns across microservices
        ✔ Replacing multiple clients calls with single API call 
        ✔ Reverse proxy: serving static content; caching responses
        ✔ Routing based on headers, paths & params,etc. 
        ✔ Load balancing, A/B testing, Canary releases

        Self managed
        ✔ Apache
        ✔ HAProxy
        ✔ NGINX
        ✔ Spring Cloud Gateway

        Cloud services
        ✔ AWS API Gateway
        ✔ Azure API Gateway
        ✔ Google Cloud endpoints
        ✔ Apigee
      
💾 Part 11     
💻 Message Queues
    📢 Sync & Async
       📢 Synchronous communication => Information/data is shared in real time
                No wait, direct & immediate communication, analogy-phone communication

       📢 asynchronous communication => Information/data is independent of time, 
                Wait for response, analogy - email, chat, etc. immediate response not necessary
            ✔ Real time analogy 1 => customers waiting in the bank, either queue or token system
                                    - Larger number of customer served though delay
            ✔ Online store => when ordered the store says successfully order placed.
                            => larger number of customers requesting for invoice history will be queued
                            => the invoice will be sent to their specific email

    📢 What is Message Queues?
        ✔ are middleware used by different parts of the system (producers/consumers) to communicate or process operations asynchronously
        ✔ process which has data structure in the memory to store the messages
        ✔ could be process running in the same machine or different interacting with each other
        ✔ E.g. - Kafka, SQS, RabbitMQ

    📢 Models: Producer & Consumer
        ✔ Producer => add messages to the queue which has to be processed
        ✔ Consumer => carries out the message and start operation

        order=> FIFO - Amazon SQS- the next message cannot be consumed until it processed the first one
                => downside is it stops processing if one of the processing fails 

                => ordered MQs (e.g. text messages)
                => unordered MQs (eg. invoice generation request)
        consumption => one to one - Producer consumer model
                    =>One to many - Publish subscriber model

    📢 Advantages & disadvantage
        ✔ producers can help when all the load can be enqueued & decoupling
        ✔ when there is load consumers rate can be increased & dequeued
        ✔ sending emails, decoupling 
        ✔ bulk operations can be handled
        
        
💾 Part 12     
💻 Pub-sub Messaging => Analogy - Broadcast message
                    => Publisher => Similar to producer, publishes the message via input channel
                    => subscriber => similar to consumer, consumers or reacts to the messages via output channel
                    => Message broker => modifies data to the outpur channel, 
                                     => divides the messages to rdifferent responsible subscribers
                
                Example: Analogy of Ecommerce site
                    => Order placed can be published using publisher
                    => Order Id messages sent to input channel
                    => Message broker fetches details from Order Id and sends to the output channel
                    => SMS, Email, Logs, Order processing are the subscribers 
                    => based on the published data, the subscribers reacts based on their responsibilities


                Factors => Message Ordering
                        => Message consumption
                        => Posion Messages
                        => Duplicate Messages

    Usecases => Async workflow - adding to cart is sync workflow but process after added to cart can be async workflow
             => decoupling - continuous UI clicks or events can be in a queue
             => load balancing - balancing heavy throughput, by adding subscribers for a multiple events from publishers
             => deferred processing - according to the scheduled time the events are processed
             => data streaming 

            When to not to use => limited number of orders not required to use this pattern
                               => for real time systems
                            